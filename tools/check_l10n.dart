// tools/check_l10n_advanced.dart
import 'dart:convert';
import 'dart:io';

void main(List<String> args) async {
  final bool fix = args.contains('--fix');
  final bool verbose = args.contains('--verbose');
  
  print('üîç MoodMap –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è Checker v2.0\n');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ ARB —Ñ–∞–π–ª—ã
  final enArb = await loadArb('lib/l10n/app_en.arb');
  final frArb = await loadArb('lib/l10n/app_fr.arb');
  
  // –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  final usedKeys = await findUsedKeys(verbose);
  
  // –ê–Ω–∞–ª–∏–∑
  final enKeys = enArb.keys.where((k) => !k.startsWith('@')).toSet();
  final frKeys = frArb.keys.where((k) => !k.startsWith('@')).toSet();
  
  final unusedKeys = enKeys.difference(usedKeys);
  final missingInCode = usedKeys.difference(enKeys);
  final missingInFr = enKeys.difference(frKeys);
  final extraInFr = frKeys.difference(enKeys);
  
  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n');
  print('  EN –∫–ª—é—á–µ–π: ${enKeys.length}');
  print('  FR –∫–ª—é—á–µ–π: ${frKeys.length}');
  print('  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: ${usedKeys.length}\n');
  
  bool hasIssues = false;
  
  if (unusedKeys.isNotEmpty) {
    hasIssues = true;
    print('‚ö†Ô∏è  –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª—é—á–∏ (${unusedKeys.length}):');
    for (var key in unusedKeys) {
      print('    - $key');
      if (verbose && enArb[key] != null) {
        print('      "${enArb[key]}"');
      }
    }
    print('');
  }
  
  if (missingInCode.isNotEmpty) {
    hasIssues = true;
    print('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ ARB (${missingInCode.length}):');
    for (var key in missingInCode) {
      print('    - $key');
      // –ù–∞–π–¥–µ–º –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      if (verbose) {
        final usage = await findKeyUsage(key);
        print('      –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: $usage');
      }
    }
    print('');
  }
  
  if (missingInFr.isNotEmpty) {
    hasIssues = true;
    print('üá´üá∑ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º (${missingInFr.length}):');
    for (var key in missingInFr) {
      print('    - $key: "${enArb[key]}"');
    }
    print('');
  }
  
  if (extraInFr.isNotEmpty) {
    hasIssues = true;
    print('üá´üá∑ –õ–∏—à–Ω–∏–µ –≤–æ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º (${extraInFr.length}):');
    for (var key in extraInFr) {
      print('    - $key');
    }
    print('');
  }
  
  // –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  if (fix && hasIssues) {
    print('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...\n');
    
    if (unusedKeys.isNotEmpty) {
      final confirm = await askConfirmation(
        '–£–¥–∞–ª–∏—Ç—å ${unusedKeys.length} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª—é—á–µ–π?'
      );
      if (confirm) {
        await removeUnusedKeys(unusedKeys);
        print('‚úÖ –£–¥–∞–ª–µ–Ω–æ ${unusedKeys.length} –∫–ª—é—á–µ–π\n');
      }
    }
    
    if (missingInFr.isNotEmpty) {
      print('üìù –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã...');
      await addMissingTranslations(enArb, frArb, missingInFr);
      print('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${missingInFr.length} –ø–µ—Ä–µ–≤–æ–¥–æ–≤\n');
    }
  }
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
  if (!hasIssues) {
    print('‚úÖ –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!\n');
  } else if (!fix) {
    print('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --fix –¥–ª—è –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n');
  }
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  if (verbose) {
    print('üìà –¢–æ–ø-10 —Ñ–∞–π–ª–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é l10n:');
    final stats = await getUsageStats();
    stats.take(10).forEach((entry) {
      print('    ${entry.key}: ${entry.value} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π');
    });
  }
}

Future<Map<String, dynamic>> loadArb(String path) async {
  final file = File(path);
  if (!await file.exists()) {
    print('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $path');
    exit(1);
  }
  return jsonDecode(await file.readAsString());
}

Future<Set<String>> findUsedKeys(bool verbose) async {
  final usedKeys = <String>{};
  final libDir = Directory('lib');
  
  await for (var entity in libDir.list(recursive: true)) {
    if (entity is File && entity.path.endsWith('.dart')) {
      final content = await entity.readAsString();
      
      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
      final patterns = [
        RegExp(r'l10n\.(\w+)'),                    // l10n.key
        RegExp(r'AppLocalizations\.of\(context\)[!]?\.(\w+)'), // –ø–æ–ª–Ω–∞—è —Ñ–æ—Ä–º–∞
      ];
      
      for (var pattern in patterns) {
        final matches = pattern.allMatches(content);
        for (var match in matches) {
          final key = match.group(1)!;
          usedKeys.add(key);
          if (verbose && usedKeys.length % 10 == 0) {
            stdout.write('.');
          }
        }
      }
    }
  }
  
  if (verbose) print('');
  return usedKeys;
}

Future<String> findKeyUsage(String key) async {
  final files = <String>[];
  final libDir = Directory('lib');
  
  await for (var entity in libDir.list(recursive: true)) {
    if (entity is File && entity.path.endsWith('.dart')) {
      final content = await entity.readAsString();
      if (content.contains('l10n.$key')) {
        files.add(entity.path.replaceAll('lib/', ''));
      }
    }
  }
  
  return files.isEmpty ? '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : files.join(', ');
}

Future<bool> askConfirmation(String question) async {
  stdout.write('$question (y/n): ');
  final answer = stdin.readLineSync()?.toLowerCase();
  return answer == 'y' || answer == 'yes';
}

Future<void> removeUnusedKeys(Set<String> keys) async {
  // –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–∑ ARB —Ñ–∞–π–ª–æ–≤
  // –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
}

Future<void> addMissingTranslations(
  Map<String, dynamic> enArb,
  Map<String, dynamic> frArb, 
  Set<String> keys
) async {
  // –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google Translate API –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∏
}

Future<List<MapEntry<String, int>>> getUsageStats() async {
  final stats = <String, int>{};
  // –ü–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø–æ —Ñ–∞–π–ª–∞–º
  return stats.entries.toList()
    ..sort((a, b) => b.value.compareTo(a.value));
}